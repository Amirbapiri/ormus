package sourceservice

import (
	"github.com/ormushq/ormus/manager/entity"
	"github.com/ormushq/ormus/manager/managerparam"
	"github.com/ormushq/ormus/pkg/richerror"
	writekey "github.com/ormushq/ormus/pkg/write_key"
	"time"
)

func (s Service) CreateSource(req *managerparam.AddSourceRequest, ownerID string) (*managerparam.AddSourceResponse, error) {
	const op = "sourceservice.CreateSource"

	w, err := writekey.GenerateNewWriteKey()
	if err != nil {
		return nil, err
	}

	writeKeyMetaData := entity.WriteKeyMetaData{
		WriteKey:   w,
		OwnerID:    ownerID,
		SourceID:   "",
		CreatedAt:  time.Now(),
		LastUsedAt: time.Now(),
		Status:     entity.WriteKeyStatusActive,
	}

	source := entity.Source{
		ID:          "", // Will be generated by the repository
		WriteKey:    writeKeyMetaData,
		Name:        req.Name,
		Description: req.Description,
		OwnerID:     ownerID,
		ProjectID:   req.ProjectID,
		Status:      entity.StatusActive,
		CreateAt:    time.Now(),
		UpdateAt:    time.Now(),
	}

	// TODO: The reason(s) behind '&source' instead of 'source'
	response, err := s.repo.InsertSource(&source)
	if err != nil {
		return nil, err
	}

	writeKeyMetaData.SourceID = response.ID

	err = s.repo.UpdateWriteKeyMetaData(&writeKeyMetaData)
	if err != nil {
		return nil, richerror.New(op)
	}

	return response, nil
}
