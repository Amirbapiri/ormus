// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: writekey.proto

package writekey

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	WriteKeyManager_GetWriteKey_FullMethodName = "/writekey.WriteKeyManager/GetWriteKey"
)

// WriteKeyManagerClient is the client API for WriteKeyManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WriteKeyManagerClient interface {
	GetWriteKey(ctx context.Context, in *GetWriteKeyRequest, opts ...grpc.CallOption) (*GetWriteKeyResponse, error)
}

type writeKeyManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewWriteKeyManagerClient(cc grpc.ClientConnInterface) WriteKeyManagerClient {
	return &writeKeyManagerClient{cc}
}

func (c *writeKeyManagerClient) GetWriteKey(ctx context.Context, in *GetWriteKeyRequest, opts ...grpc.CallOption) (*GetWriteKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWriteKeyResponse)
	err := c.cc.Invoke(ctx, WriteKeyManager_GetWriteKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WriteKeyManagerServer is the server API for WriteKeyManager service.
// All implementations must embed UnimplementedWriteKeyManagerServer
// for forward compatibility
type WriteKeyManagerServer interface {
	GetWriteKey(context.Context, *GetWriteKeyRequest) (*GetWriteKeyResponse, error)
	mustEmbedUnimplementedWriteKeyManagerServer()
}

// UnimplementedWriteKeyManagerServer must be embedded to have forward compatible implementations.
type UnimplementedWriteKeyManagerServer struct {
}

func (UnimplementedWriteKeyManagerServer) GetWriteKey(context.Context, *GetWriteKeyRequest) (*GetWriteKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWriteKey not implemented")
}
func (UnimplementedWriteKeyManagerServer) mustEmbedUnimplementedWriteKeyManagerServer() {}

// UnsafeWriteKeyManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WriteKeyManagerServer will
// result in compilation errors.
type UnsafeWriteKeyManagerServer interface {
	mustEmbedUnimplementedWriteKeyManagerServer()
}

func RegisterWriteKeyManagerServer(s grpc.ServiceRegistrar, srv WriteKeyManagerServer) {
	s.RegisterService(&WriteKeyManager_ServiceDesc, srv)
}

func _WriteKeyManager_GetWriteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWriteKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriteKeyManagerServer).GetWriteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WriteKeyManager_GetWriteKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriteKeyManagerServer).GetWriteKey(ctx, req.(*GetWriteKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WriteKeyManager_ServiceDesc is the grpc.ServiceDesc for WriteKeyManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WriteKeyManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "writekey.WriteKeyManager",
	HandlerType: (*WriteKeyManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWriteKey",
			Handler:    _WriteKeyManager_GetWriteKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "writekey.proto",
}
